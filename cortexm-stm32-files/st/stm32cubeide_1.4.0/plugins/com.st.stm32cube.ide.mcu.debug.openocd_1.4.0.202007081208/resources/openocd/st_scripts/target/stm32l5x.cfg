# script for stm32l5x family

#
# stm32l5 devices support both JTAG and SWD transports.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32l5
}

if { [info exists CONNECT_UNDER_RESET] } {
   set _CONNECT_UNDER_RESET $CONNECT_UNDER_RESET
} else {
   set _CONNECT_UNDER_RESET 0
}

if { [info exists ENABLE_LOW_POWER] } {
   set _ENABLE_LOW_POWER $ENABLE_LOW_POWER
} else {
   set _ENABLE_LOW_POWER 0
}

if { [info exists STOP_WATCHDOG] } {
   set _STOP_WATCHDOG $STOP_WATCHDOG
} else {
   set _STOP_WATCHDOG 0
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 64kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x10000
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      # See STM Document RM0438
      # Section 44.6.3 - corresponds to Cortex-M33
      set _CPUTAPID 0x0ba04477
   } else {
      # SWD IDCODE (single drop, arm)
      set _CPUTAPID 0x0be12477
   }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
dap create $_CHIPNAME.dap -chain-position $_TARGETNAME

target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num 0

# flash size will be probed
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME stm32l5x 0x08000000 0 0 0 $_TARGETNAME

# declare secure flash bank with secure mapping
set _FLASHNAME $_CHIPNAME.flash_sec
flash bank $_FLASHNAME stm32l5x 0x0C000000 0 0 0 $_TARGETNAME

if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 4000
}
adapter speed $_CLOCK_FREQ

adapter srst delay 100
if {[using_jtag]} {
	jtag_ntrst_delay 100
}

if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

$_TARGETNAME configure -event examine-end {
global _ENABLE_LOW_POWER
global _STOP_WATCHDOG

	if { [expr ($_ENABLE_LOW_POWER == 1)] } {
		# Enable debug during low power modes (uses more power)
		# DBGMCU_CR |= DBG_STANDBY | DBG_STOP
		mmw 0xE0044004 0x00000006 0
	}
	if { [expr ($_ENABLE_LOW_POWER == 0)] } {
		# Disable debug during low power modes
		# DBGMCU_CR |= ~(DBG_STANDBY | DBG_STOP)
		mmw 0xE0044004 0 0x00000006
	}
	if { [expr ($_STOP_WATCHDOG == 1)] } {
		# Stop watchdog counters during halt
		# DBGMCU_APB1_FZ |= DBG_IWDG_STOP | DBG_WWDG_STOP
		mmw 0xE0044008 0x00001800 0
	}
	if { [expr ($_STOP_WATCHDOG == 0)] } {
		# Don't stop watchdog counters during halt
		# DBGMCU_APB1_FZ |= ~(DBG_IWDG_STOP | DBG_WWDG_STOP)
		mmw 0xE0044008 0 0x00001800
	}
}

$_TARGETNAME configure -event trace-config {
	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
	# change this value accordingly to configure trace pins
	# assignment
	mmw 0xE0044004 0x00000020 0
}

proc ahb_ap_non_secure_access {} {
global _CHIPNAME

	# SPROT=1=Non Secure access, Priv=1
	$_CHIPNAME.dap apcsw 0x4B000000
}

proc ahb_ap_secure_access {} {
global _CHIPNAME

	# SPROT=0=Secure access, Priv=1
	$_CHIPNAME.dap apcsw 0x0B000000
}

$_TARGETNAME configure -event halted {
	if {[expr [expr [expr [mrw 0xE000EE08] & (1 << 16)] >> 16] ] == 1} {
		echo "CPU in Secure state"
		ahb_ap_secure_access
	} else {
		echo "CPU in Non-Secure state"
		ahb_ap_non_secure_access
	}
}

proc SecurePLL {} {
	# Mcu clock is at MSI 4MHz after reset, set mcu freq at 110 MHz with PLL
	# RCC_APB1ENR1 = PWREN
	mww 0x50021058 0x10000000
	# delay for register clock enable (read back reg)
	mrw 0x50021058
	# PWR_CR1 : VOS Range 0
	mww 0x50007000 0
	# while (PWR_SR2 & VOSF)
	while {([mrw 0x50007014] & 0x0400)} {}
	# FLASH_ACR : 5 WS for 110 MHz HCLK
	mww 0x40022000 0x00000005
	# RCC_PLLCFGR = PLLP=PLLQ=0, PLLR=00=2, PLLREN=1, PLLN=55, PLLM=0000=1, PLLSRC=MSI 4MHz
	# fVCO = 4 x 55 /1 = 220
	# SYSCLOCK = fVCO/PLLR = 220/2 = 110 MHz
	mww 0x5002100C 0x01003711
	# RCC_CR |= PLLON
	mmw 0x50021000 0x01000000 0
	# while !(RCC_CR & PLLRDY)
	while {!([mrw 0x50021000] & 0x02000000)} {}
	# RCC_CFGR |= SW_PLL
	mmw 0x50021008 0x00000003 0
	# while ((RCC_CFGR & SWS) != PLL)
	while {([mrw 0x50021008] & 0x0C) != 0x0C} {}
}

proc NonSecurePLL {} {
	# Mcu clock is at MSI 4MHz after reset, set mcu freq at 110 MHz with PLL
	# RCC_APB1ENR1 = PWREN
	mww 0x40021058 0x10000000
	# delay for register clock enable (read back reg)
	mrw 0x40021058
	# PWR_CR1 : VOS Range 0
	mww 0x40007000 0
	# while (PWR_SR2 & VOSF)
	while {([mrw 0x40007014] & 0x0400)} {}
	# FLASH_ACR : 5 WS for 110 MHz HCLK
	mww 0x40022000 0x00000005
	# RCC_PLLCFGR = PLLP=PLLQ=0, PLLR=00=2, PLLREN=1, PLLN=55, PLLM=0000=1, PLLSRC=MSI 4MHz
	# fVCO = 4 x 55 /1 = 220
	# SYSCLOCK = fVCO/PLLR = 220/2 = 110 MHz
	mww 0x4002100C 0x01003711
	# RCC_CR |= PLLON
	mmw 0x40021000 0x01000000 0
	# while !(RCC_CR & PLLRDY)
	while {!([mrw 0x40021000] & 0x02000000)} {}
	# RCC_CFGR |= SW_PLL
	mmw 0x40021008 0x00000003 0
	# while ((RCC_CFGR & SWS) != PLL)
	while {([mrw 0x40021008] & 0x0C) != 0x0C} {}
}

$_TARGETNAME configure -event reset-init {
global _CLOCK_FREQ

	# After Reset, system clock is MSI at only 4 MHz, enable PLL to set 110 MHz clock freq
	if {[expr [expr [expr [mrw 0xE000EE08] & (1 << 16)] >> 16] ] == 1} {
		SecurePLL
	} else {
		NonSecurePLL
	}
	adapter speed $_CLOCK_FREQ
}

$_TARGETNAME configure -event gdb-attach {
global _TARGETNAME
global _WORKAREASIZE
global _CONNECT_UNDER_RESET

	# test TZEN option bit
	if {[expr [expr [expr [mrw 0x40022040] & (1 << 31)] >> 31] ] == 1} {
		ahb_ap_secure_access
		echo "TZEN option bit activated"
		# Use secure mapping
		$_TARGETNAME configure -work-area-phys 0x30000000 -work-area-size $_WORKAREASIZE -work-area-backup 1
	} else {
		ahb_ap_non_secure_access
		$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 1
	}

	# Needed to be able to use the connect_assert_srst in reset_config
	if { [expr ($_CONNECT_UNDER_RESET == 1)] } {
		reset init
	}
}

$_TARGETNAME configure -event gdb-detach {
	# to close connection if debug mode entered
	shutdown
}
