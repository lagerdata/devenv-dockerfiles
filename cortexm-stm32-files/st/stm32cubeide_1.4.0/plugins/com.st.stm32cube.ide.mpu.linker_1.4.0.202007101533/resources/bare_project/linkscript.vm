## Apache Velocity template
## Please see http://velocity.apache.org/engine/2.0/translations/user-guide_fr.html
/**
 ******************************************************************************
 * @file      LinkerScript.ld
 * @author    Auto-generated by STM32CubeIDE
#if ($linkScriptInputs.getBoard().isGeneric())
 * @brief     Linker script for $linkScriptInputs.getBoard().getMcu().getName() Device from $linkScriptInputs.getBoard().getMcu().getSerie().getName().toUpperCase() series
#foreach( $romMemory in $linkScriptInputs.getReadOnlyInternalMemorySet() )
 *                      $romMemory.getKBytesSize()Kbytes $romMemory.getName()
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableInternalMemorySet() )
 *                      $ramMemory.getKBytesSize()Kbytes $ramMemory.getName()
#end
#else
 *  Abstract    : Linker script for $linkScriptInputs.getBoard().getName() Board embedding $linkScriptInputs.getBoard().getMcu().getName() Device from $linkScriptInputs.getBoard().getMcu().getSerie().getName() series
#foreach( $romMemory in $linkScriptInputs.getReadOnlyExternalMemorySet() )
 *                      $romMemory.getKBytesSize()Kbytes $romMemory.getName()
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableExternalMemorySet() )
 *                      $ramMemory.getKBytesSize()Kbytes $ramMemory.getName()
#end
#foreach( $romMemory in $linkScriptInputs.getReadOnlyInternalMemorySet() )
 *                      $romMemory.getKBytesSize()Kbytes $romMemory.getName()
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableInternalMemorySet() )
 *                      $ramMemory.getKBytesSize()Kbytes $ramMemory.getName()
#end
#end
 *
 *            Set heap size, stack size and stack location according
 *            to application requirements.
 *
 *            Set memory bank area and size if external memory is used
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
#set($Integer = 0)
#set($baseMemoryInterruptsSuffix = "_interrupts")
#set($mainMemoryTextSuffix = "_text")
#set($mainMemoryDataSuffix = "_data")
#set($mainMemoryIpcShmSuffix = "_ipc_shm")

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
#if ( $linkScriptInputs.getStackAddress() < 0 )
_estack = ORIGIN($linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}) + LENGTH($linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix});	/* end of "$linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}" $linkScriptInputs.getMemoryBank2().getType().toString() type memory */
#else
_estack = 0x$Integer.toHexString($linkScriptInputs.getStackAddress());
#end

_Min_Heap_Size = 0x$Integer.toHexString($linkScriptInputs.getHeapSize());	/* required amount of heap  */
_Min_Stack_Size = 0x$Integer.toHexString($linkScriptInputs.getStackSize());	/* required amount of stack */

/* Memories definition */
MEMORY
{
#if ( $linkScriptInputs.getBootMemory() )
  $linkScriptInputs.getBootMemory().getName()${baseMemoryInterruptsSuffix}		($linkScriptInputs.getBootMemory().getType().getAccessModes())	: ORIGIN = $linkScriptInputs.getBootMemory().getStartAddress(),	LENGTH = 0x00000600 
#else
  RETRAM${baseMemoryInterruptsSuffix}		(xrw)	: ORIGIN = 0x00000000,	LENGTH = 0x00000298 
#end
  $linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}		($linkScriptInputs.getMemoryBank1().getType().getAccessModes())	: ORIGIN = $linkScriptInputs.getMemoryBank1().getStartAddress(),	LENGTH = $linkScriptInputs.getMemoryBank1().getKBytesSize()K
  $linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}		($linkScriptInputs.getMemoryBank2().getType().getAccessModes())	: ORIGIN = $linkScriptInputs.getMemoryBank2().getStartAddress(),	LENGTH = $linkScriptInputs.getMemoryBank1().getKBytesSize()K 
  $linkScriptInputs.getMemoryBank3().getName()${mainMemoryIpcShmSuffix}		($linkScriptInputs.getMemoryBank3().getType().getAccessModes())	: ORIGIN = $linkScriptInputs.getMemoryBank3().getStartAddress(),	LENGTH = 0x00008000
#foreach( $memory in $linkScriptInputs.getExtraMemoryBanks() )
  $memory.getName()		($memory.getType().getAccessModes())	: ORIGIN = $memory.getStartAddress(),	LENGTH = $memory.getKBytesSize()K
#end
}

 /* Symbols needed for OpenAMP to enable rpmsg */
__OPENAMP_region_start__  = ORIGIN($linkScriptInputs.getMemoryBank3().getName()${mainMemoryIpcShmSuffix});
__OPENAMP_region_end__ = ORIGIN($linkScriptInputs.getMemoryBank3().getName()${mainMemoryIpcShmSuffix})+LENGTH($linkScriptInputs.getMemoryBank3().getName()${mainMemoryIpcShmSuffix});

/* Sections */
SECTIONS
{
#if ( $linkScriptInputs.getBootMemory() )
  /* The startup code into "$linkScriptInputs.getBootMemory().getName()${baseMemoryInterruptsSuffix}" $linkScriptInputs.getBootMemory().getType().toString() type memory */
#else
  /* The startup code into "RETRAM${baseMemoryInterruptsSuffix}" Ram type memory */
#end
  .isr_vector :
  {
#if ( $linkScriptInputs.getBootMemory() )
    . = ALIGN($linkScriptInputs.getBootMemory().getMinAlignment());
#else
    . = ALIGN(4);
#end
    KEEP(*(.isr_vector)) /* Startup code */
#if ( $linkScriptInputs.getBootMemory() )
    . = ALIGN($linkScriptInputs.getBootMemory().getMinAlignment());
#else
    . = ALIGN(4);
#end
#if ( $linkScriptInputs.getBootMemory() )
  } >$linkScriptInputs.getBootMemory().getName()${baseMemoryInterruptsSuffix}
#else
  } >RETRAM${baseMemoryInterruptsSuffix}
#end

  /* The program code and other data into "$linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}" $linkScriptInputs.getMemoryBank1().getType().toString() type memory */
  .text :
  {
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
    _etext = .;        /* define a global symbols at end of code */
  } >$linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}

  /* Constant data into "$linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}" $linkScriptInputs.getMemoryBank1().getType().toString() type memory */
  .rodata :
  {
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
  } >$linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}

  .ARM.extab   : { 
  	. = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
  	*(.ARM.extab* .gnu.linkonce.armextab.*)
  	. = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
  } >$linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}
  
  .ARM : {
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
  } >$linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}

  .preinit_array     :
  {
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
  } >$linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}
  
  .init_array :
  {
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
  } >$linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}
  
  .fini_array :
  {
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
    . = ALIGN($linkScriptInputs.getMemoryBank1().getMinAlignment());
  } >$linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}

  /* Used by the startup to initialize data */
  __DATA_ROM = .;
  _sidata = LOADADDR(.data);

  /* Initialized data sections into "$linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}" $linkScriptInputs.getMemoryBank2().getType().toString() type memory */
  .data :  AT(__DATA_ROM)
  {
    . = ALIGN($linkScriptInputs.getMemoryBank2().getMinAlignment());
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN($linkScriptInputs.getMemoryBank2().getMinAlignment());
    _edata = .;        /* define a global symbol at data end */
  } >$linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}
  
    __DATA_END = __DATA_ROM + (_edata - _sdata);
  text_end = ORIGIN($linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix}) + LENGTH($linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix});
  ASSERT(__DATA_END <= text_end, "region $linkScriptInputs.getMemoryBank1().getName()${mainMemoryTextSuffix} overflowed with text and data")
  
  .resource_table :
  {
    . = ALIGN($linkScriptInputs.getMemoryBank2().getMinAlignment());
    KEEP (*(.resource_table*))
    . = ALIGN($linkScriptInputs.getMemoryBank2().getMinAlignment());
  } >$linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}
    
  /* Uninitialized data section into "$linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}" $linkScriptInputs.getMemoryBank2().getType().toString() type memory */
  . = ALIGN($linkScriptInputs.getMemoryBank2().getMinAlignment());
  .bss :
  {
    /* This is used by the startup in order to initialize the .bss secion */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN($linkScriptInputs.getMemoryBank2().getMinAlignment());
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >$linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}

  /* User_heap_stack section, used to check that there is enough "$linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}" $linkScriptInputs.getMemoryBank2().getType().toString()  type memory left */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
  } >$linkScriptInputs.getMemoryBank2().getName()${mainMemoryDataSuffix}

  /* Remove information from the compiler libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
