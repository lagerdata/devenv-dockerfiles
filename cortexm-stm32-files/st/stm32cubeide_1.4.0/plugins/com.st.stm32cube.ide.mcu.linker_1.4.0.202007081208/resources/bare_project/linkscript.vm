## Apache Velocity template
## Please see http://velocity.apache.org/engine/2.0/translations/user-guide_fr.html
/**
 ******************************************************************************
 * @file      LinkerScript.ld
 * @author    Auto-generated by STM32CubeIDE
#if ($linkScriptInputs.getBoard().isGeneric())
 * @brief     Linker script for $linkScriptInputs.getBoard().getMcu().getName() Device from $linkScriptInputs.getBoard().getMcu().getSerie().getName().toUpperCase() series
#foreach( $romMemory in $linkScriptInputs.getReadOnlyInternalMemorySet() )
 *                      $romMemory.getKBytesSize()Kbytes $romMemory.getName()
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableInternalMemorySet() )
 *                      $ramMemory.getKBytesSize()Kbytes $ramMemory.getName()
#end
#else
 *  Abstract    : Linker script for $linkScriptInputs.getBoard().getName() Board embedding $linkScriptInputs.getBoard().getMcu().getName() Device from $linkScriptInputs.getBoard().getMcu().getSerie().getName() series
#foreach( $romMemory in $linkScriptInputs.getReadOnlyExternalMemorySet() )
 *                      $romMemory.getKBytesSize()Kbytes $romMemory.getName()
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableExternalMemorySet() )
 *                      $ramMemory.getKBytesSize()Kbytes $ramMemory.getName()
#end
#foreach( $romMemory in $linkScriptInputs.getReadOnlyInternalMemorySet() )
 *                      $romMemory.getKBytesSize()Kbytes $romMemory.getName()
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableInternalMemorySet() )
 *                      $ramMemory.getKBytesSize()Kbytes $ramMemory.getName()
#end
#end
 *
 *            Set heap size, stack size and stack location according
 *            to application requirements.
 *
 *            Set memory bank area and size if external memory is used
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
#set($Integer = 0)

/* Entry Point */
ENTRY(Reset_Handler)

#if ($linkScriptInputs.isAllInRam())
  #set( $codeMemory = $linkScriptInputs.getMainWritableInternalMemory() )
#else
  #set( $codeMemory = $linkScriptInputs.getMainReadOnlyInternalMemory() )
#end
/* Highest address of the user mode stack */
#if ( $linkScriptInputs.getStackAddress() < 0 )
#set( $stackMemory = $linkScriptInputs.getMainWritableInternalMemory() )
_estack = ORIGIN($stackMemory.getName()) + LENGTH($stackMemory.getName());	/* end of "$stackMemory.getName()" $stackMemory.getType().toString() type memory */
#else
_estack = 0x$Integer.toHexString($linkScriptInputs.getStackAddress());
#end

_Min_Heap_Size = 0x$Integer.toHexString($linkScriptInputs.getHeapSize());	/* required amount of heap  */
_Min_Stack_Size = 0x$Integer.toHexString($linkScriptInputs.getStackSize());	/* required amount of stack */

#macro ( splitMemory $memory $outputNSCRegion $splitMemPosition $shouldSplitMemoryWithHole )
    #set( $memSize = $memory.getKBytesSize() / 2 )
    #if ( $linkScriptInputs.isSecureProject() )
      #set( $memPhysStart = $Integer.decode($memory.getSecureStartAddress()) )
    #else
      #set( $memPhysStart = $Integer.decode($memory.getStartAddress()) )
    #end
    #if ( $shouldSplitMemoryWithHole )
      #set( $memStart = $memPhysStart + ($memory.getKBytesSize() * 1024) )
    #else
      #set( $memStart = $memPhysStart + ($memSize * $splitMemPosition * 1024) )
    #end
    #if ( $outputNSCRegion )
      #set( $nscSize = 8 )
      #set( $memSize = $memSize - $nscSize )
      #set( $nscStart = $memStart + $memSize * 1024 )
  $memory.getName()    ($memory.getType().getAccessModes())    : ORIGIN = 0x$Integer.toHexString($memStart),    LENGTH = ${memSize}K    /* Memory is divided. Actual start is $memory.getStartAddress() and actual length is $memory.getKBytesSize()K */
  $memory.getName()_NSC    ($memory.getType().getAccessModes())    : ORIGIN = 0x$Integer.toHexString($nscStart),    LENGTH = ${nscSize}K    /* Non-Secure Call-able region */
    #elseif ( $shouldSplitMemoryWithHole )
  $memory.getName()    ($memory.getType().getAccessModes())    : ORIGIN = $memory.getStartAddress(),    LENGTH = ${memSize}K
  $memory.getName()1   ($memory.getType().getAccessModes())    : ORIGIN = 0x$Integer.toHexString($memStart),    LENGTH = ${memSize}K
    #else
  $memory.getName()    ($memory.getType().getAccessModes())    : ORIGIN = 0x$Integer.toHexString($memStart),    LENGTH = ${memSize}K    /* Memory is divided. Actual start is $memory.getStartAddress() and actual length is $memory.getKBytesSize()K */
    #end
#end
#macro ( fullMemory $memory )
  $memory.getName()    ($memory.getType().getAccessModes())    : ORIGIN = $memory.getStartAddress(),   LENGTH = $memory.getKBytesSize()K
#end
/* Memories definition */
MEMORY
{
##
## Decide to split memory or not. memPosition 0 means lower half, 1 means upper half
## Split memory if beluga device or multicore device or dual bank device with hole between banks
## example on H74 or H7A 1Mo : 512K rom on 1st bank + 512K hole between banks + 512K rom on 2nd bank
## shouldSplitMemoryWithHole assumes that the "hole" is equal to 1/2 of the memory size
## Meaning that a memory [##] is split to [#_#] where '_' is the same size as each #
##
#set( $shouldSplitMainRamMemories = false )
#set( $shouldSplitMainRomMemories = false )
#set( $shouldSplitMemoryWithHole = false )
#set( $mcuName = $linkScriptInputs.getBoard().getMcu().getName() )
#if ( $linkScriptInputs.isTrustZoneEnabled() )
  #set( $shouldSplitMainRamMemories = true )
  #set( $shouldSplitMainRomMemories = true )
  #if ( $linkScriptInputs.isSecureProject() )
    #set( $splitMemPosition = 0 )
  #else
    #set( $splitMemPosition = 1 )
  #end
#elseif ( $linkScriptInputs.getBoard().isCortexMMultiCpu() && !$linkScriptInputs.isMultiCpuDisabled() )
  #set( $shouldSplitMainRamMemories = true )
  #set( $shouldSplitMainRomMemories = true )
  #if ( $linkScriptInputs.getCoreMode().getCore().getCpu().getId().equals("0") )
    #set( $splitMemPosition = 0 )
  #elseif ( $mcuName.contains("STM32H74") && ($linkScriptInputs.getMainReadOnlyInternalMemory().getKBytesSize() == 1024) )
##  H745/H747 CM4 with hole => split flash memory with 512K hole (like mono core H742/H743/H7A3 with 1Mo flash)
    #set( $splitMemPosition = 2 )
  #else
    #set( $splitMemPosition = 1 )
  #end
#elseif ( ($mcuName.contains("STM32H74") || $mcuName.contains("STM32H7A3")) && ($linkScriptInputs.getMainReadOnlyInternalMemory().getKBytesSize() == 1024) )
  #set( $shouldSplitMainRomMemories = true )
  #set( $shouldSplitMemoryWithHole = true )
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableInternalMemorySet() )
  #if ( $shouldSplitMainRamMemories && $ramMemory.equals($linkScriptInputs.getMainWritableInternalMemory()) )
    #set( $outputNSCRegion = $ramMemory.equals($codeMemory) && $linkScriptInputs.isSecureProject() )
    #splitMemory ( $ramMemory $outputNSCRegion $splitMemPosition $shouldSplitMemoryWithHole )
  #else
    #fullMemory ( $ramMemory )
  #end
#end
#foreach( $romMemory in $linkScriptInputs.getReadOnlyInternalMemorySet() )
  #if ( $shouldSplitMainRomMemories && $romMemory.equals($linkScriptInputs.getMainReadOnlyInternalMemory()) )
    #set( $outputNSCRegion = $romMemory.equals($codeMemory) && $linkScriptInputs.isSecureProject() )
    #splitMemory ( $romMemory $outputNSCRegion $splitMemPosition $shouldSplitMemoryWithHole )
  #else
    #fullMemory ( $romMemory )
  #end
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableExternalMemorySet() )
  #fullMemory ( $ramMemory )
#end
#foreach( $romMemory in $linkScriptInputs.getReadOnlyExternalMemorySet() )
  #fullMemory ( $romMemory )
#end
}

/* Sections */
SECTIONS
{
  /* The startup code into "$codeMemory.getName()" $codeMemory.getType().toString() type memory */
  .isr_vector :
  {
    . = ALIGN($codeMemory.getMinAlignment());
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN($codeMemory.getMinAlignment());
  } >$codeMemory.getName()

  /* The program code and other data into "$codeMemory.getName()" $codeMemory.getType().toString() type memory */
  .text :
  {
    . = ALIGN($codeMemory.getMinAlignment());
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN($codeMemory.getMinAlignment());
    _etext = .;        /* define a global symbols at end of code */
  } >$codeMemory.getName()

  /* Constant data into "$codeMemory.getName()" $codeMemory.getType().toString() type memory */
  .rodata :
  {
    . = ALIGN($codeMemory.getMinAlignment());
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    . = ALIGN($codeMemory.getMinAlignment());
  } >$codeMemory.getName()

  .ARM.extab   : { 
    . = ALIGN($codeMemory.getMinAlignment());
    *(.ARM.extab* .gnu.linkonce.armextab.*)
    . = ALIGN($codeMemory.getMinAlignment());
  } >$codeMemory.getName()
  
  .ARM : {
    . = ALIGN($codeMemory.getMinAlignment());
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
    . = ALIGN($codeMemory.getMinAlignment());
  } >$codeMemory.getName()

  .preinit_array     :
  {
    . = ALIGN($codeMemory.getMinAlignment());
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
    . = ALIGN($codeMemory.getMinAlignment());
  } >$codeMemory.getName()
  
  .init_array :
  {
    . = ALIGN($codeMemory.getMinAlignment());
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
    . = ALIGN($codeMemory.getMinAlignment());
  } >$codeMemory.getName()
  
  .fini_array :
  {
    . = ALIGN($codeMemory.getMinAlignment());
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
    . = ALIGN($codeMemory.getMinAlignment());
  } >$codeMemory.getName()

  /* Used by the startup to initialize data */
  _sidata = LOADADDR(.data);

  /* Initialized data sections into "$linkScriptInputs.getMainWritableInternalMemory().getName()" $linkScriptInputs.getMainWritableInternalMemory().getType().toString() type memory */
  .data : 
  {
    . = ALIGN($codeMemory.getMinAlignment());
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN($codeMemory.getMinAlignment());
    _edata = .;        /* define a global symbol at data end */
    
#if ($linkScriptInputs.isAllInRam())
  } >$codeMemory.getName()
#else
  } >$linkScriptInputs.getMainWritableInternalMemory().getName() AT> $codeMemory.getName()
#end

#if ( $linkScriptInputs.isSecureProject() )
  .gnu.sgstubs :
  {
    . = ALIGN($codeMemory.getMinAlignment());
    *(.gnu.sgstubs*)   /* Secure Gateway stubs */
    . = ALIGN($codeMemory.getMinAlignment());
  } >$codeMemory.getName()_NSC

#end
  /* Uninitialized data section into "$linkScriptInputs.getMainWritableInternalMemory().getName()" $linkScriptInputs.getMainWritableInternalMemory().getType().toString() type memory */
  . = ALIGN($linkScriptInputs.getMainWritableInternalMemory().getMinAlignment());
  .bss :
  {
    /* This is used by the startup in order to initialize the .bss section */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN($linkScriptInputs.getMainWritableInternalMemory().getMinAlignment());
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >$linkScriptInputs.getMainWritableInternalMemory().getName()

  /* User_heap_stack section, used to check that there is enough "$linkScriptInputs.getMainWritableInternalMemory().getName()" $linkScriptInputs.getMainWritableInternalMemory().getType().toString()  type memory left */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
  } >$linkScriptInputs.getMainWritableInternalMemory().getName()

  /* Remove information from the compiler libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
