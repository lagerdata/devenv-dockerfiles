## Apache Velocity template
## Please see http://velocity.apache.org/engine/2.0/translations/user-guide_fr.html
##
/**
 ******************************************************************************
 * @file      $fileName
 * @author    Auto-generated by STM32CubeIDE
 * @brief     $mcu.getName() device vector table for GCC toolchain.
 *            This module performs:
 *                - Set the initial SP
 *                - Set the initial PC == Reset_Handler,
 *                - Set the vector table entries with the exceptions ISR address
 *                - Branches to main in the C library (which eventually
 *                  calls main()).
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

.syntax unified
.cpu $cpuCore
.fpu softvfp
.thumb

.global g_pfnVectors
.global Default_Handler

/* start address for the initialization values of the .data section.
defined in linker script */
.word _sidata
/* start address for the .data section. defined in linker script */
.word _sdata
/* end address for the .data section. defined in linker script */
.word _edata
/* start address for the .bss section. defined in linker script */
.word _sbss
/* end address for the .bss section. defined in linker script */
.word _ebss

/**
 * @brief  This is the code that gets called when the processor first
 *          starts execution following a reset event. Only the absolutely
 *          necessary set is performed, after which the application
 *          supplied main() routine is called.
 * @param  None
 * @retval : None
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
  mov   sp, r0          /* set stack pointer */
/* Call the clock system intitialization function.*/
  bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
  ldr r1, =_edata
  ldr r2, =_sidata
  movs r3, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r4, [r2, r3]
  str r4, [r0, r3]
  adds r3, r3, #4

LoopCopyDataInit:
  adds r4, r0, r3
  cmp r4, r1
  bcc CopyDataInit

/* Zero fill the bss segment. */
  ldr r2, =_sbss
  ldr r4, =_ebss
  movs r3, #0
  b LoopFillZerobss

FillZerobss:
  str  r3, [r2]
  adds r2, r2, #4

LoopFillZerobss:
  cmp r2, r4
  bcc FillZerobss

/* Call static constructors */
  bl __libc_init_array
/* Call the application's entry point.*/
  bl main

LoopForever:
    b LoopForever

  .size Reset_Handler, .-Reset_Handler

/**
 * @brief  This is the code that gets called when the processor receives an
 *         unexpected interrupt.  This simply enters an infinite loop, preserving
 *         the system state for examination by a debugger.
 *
 * @param  None
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
  .size Default_Handler, .-Default_Handler

/******************************************************************************
*
* The $mcu.getName() vector table.  Note that the proper constructs
* must be placed on this to ensure that it ends up at physical address
* 0x0000.0000.
*
******************************************************************************/
  .section .isr_vector,"a",%progbits
  .type g_pfnVectors, %object
  .size g_pfnVectors, .-g_pfnVectors

g_pfnVectors:
  .word _estack
  .word Reset_Handler
  .word NMI_Handler
  .word HardFault_Handler
#if ($cpuCore == "cortex-m0" || $cpuCore == "cortex-m0plus")
  .word	0
  .word	0
  .word	0
#elseif ($cpuCore == "cortex-m3" || $cpuCore == "cortex-m4" || $cpuCore == "cortex-m7" || $cpuCore == "cortex-m33")
  .word	MemManage_Handler
  .word	BusFault_Handler
  .word	UsageFault_Handler
#else
  .word	0
  .word	0
  .word	0
#end
#if ($cpuCore == "cortex-m33")
  .word	SecureFault_Handler
#else
  .word	0
#end
  .word	0
  .word	0
  .word	0
  .word	SVC_Handler
#if ($cpuCore == "cortex-m0" || $cpuCore == "cortex-m0plus")
  .word	0
#elseif ($cpuCore == "cortex-m3" || $cpuCore == "cortex-m4" || $cpuCore == "cortex-m7" || $cpuCore == "cortex-m33")
  .word	DebugMon_Handler
#else
  .word	0
#end
  .word	0
  .word	PendSV_Handler
  .word	SysTick_Handler
#foreach($interrupt in $interruptDescriptionList)
#if (!$interrupt)
  .word	0
#elseif ($interrupt.getName() == "0")
  .word	$interrupt.getFormattedName($interruptDescriptionList, "_IRQHandler", false)			/* $interrupt.getFormattedDescription($interruptDescriptionList) */
#else
  .word	$interrupt.getFormattedName($interruptDescriptionList, "_IRQHandler",true)			/* $interrupt.getFormattedDescription($interruptDescriptionList) */
#end
#end

/*******************************************************************************
*
* Provide weak aliases for each Exception handler to the Default_Handler.
* As they are weak aliases, any function with the same name will override
* this definition.
*
*******************************************************************************/

	.weak	NMI_Handler
	.thumb_set NMI_Handler,Default_Handler

	.weak	HardFault_Handler
	.thumb_set HardFault_Handler,Default_Handler
#if ($cpuCore == "cortex-m0" || $cpuCore == "cortex-m0plus")

#elseif ($cpuCore == "cortex-m3" || $cpuCore == "cortex-m4" || $cpuCore == "cortex-m7" || $cpuCore == "cortex-m33")

	.weak	MemManage_Handler
	.thumb_set MemManage_Handler,Default_Handler

	.weak	BusFault_Handler
	.thumb_set BusFault_Handler,Default_Handler

	.weak	UsageFault_Handler
	.thumb_set UsageFault_Handler,Default_Handler

#if ($cpuCore == "cortex-m33")
	.weak	SecureFault_Handler
	.thumb_set SecureFault_Handler,Default_Handler

#else
#end
#else
#end
	.weak	SVC_Handler
	.thumb_set SVC_Handler,Default_Handler
#if ($cpuCore == "cortex-m0" || $cpuCore == "cortex-m0plus")

#elseif ($cpuCore == "cortex-m3" || $cpuCore == "cortex-m4" || $cpuCore == "cortex-m7" || $cpuCore == "cortex-m33")

	.weak	DebugMon_Handler
	.thumb_set DebugMon_Handler,Default_Handler

#else
#end
	.weak	PendSV_Handler
	.thumb_set PendSV_Handler,Default_Handler

	.weak	SysTick_Handler
	.thumb_set SysTick_Handler,Default_Handler

#foreach($interrupt in $interruptDescriptionList)
#if (!$interrupt || $interrupt.getName() == "0")
#else
	.weak	$interrupt.getName()_IRQHandler
	.thumb_set $interrupt.getName()_IRQHandler,Default_Handler

#end
#end
	.weak	SystemInit

/************************ (C) COPYRIGHT STMicroelectonics *****END OF FILE****/
